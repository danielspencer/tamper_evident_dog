#!/usr/bin/env ocaml

#use "topfind";;
#require "unix";;

open Printf

let red fmt = sprintf ("\027[31m"^^fmt^^"\027[m")
let green fmt = sprintf ("\027[32m"^^fmt^^"\027[m")
let yellow fmt = sprintf ("\027[33m"^^fmt^^"\027[m")
let blue fmt = sprintf ("\027[36m"^^fmt^^"\027[m")

let red_s = red "%s"
let green_s = green "%s"
let yellow_s = yellow "%s"
let blue_s = blue "%s"

let info fmt =
  kprintf (printf "%s\n%!") fmt

let error fmt =
  kprintf (fun str -> eprintf "%s %s\n%!" (red_s "error:") str) fmt

let output_file ~file contents =
  let oc = open_out file in
  output_string oc contents;
  close_out oc

let append_file ~file contents =
  let oc = open_out_gen [Open_append; Open_creat] 0o644 file in
  output_string oc contents;
  close_out oc

module StringSet = Set.Make(String)

let add_line ~file line =
  if Sys.file_exists file then
    let ic = open_in file in
    let rec lines acc =
      let line =
        try
          let line = input_line ic in
          Some line
        with End_of_file ->
          None
      in
      match line with
      | None   -> acc
      | Some l -> lines (StringSet.add l acc)
    in
    let lines = StringSet.add line (lines StringSet.empty) in
    output_file ~file (String.concat "\n" (StringSet.elements lines) ^ "\n")
  else
    output_file ~file (line ^ "\n")

let append ~file str =
  append_file ~file (str ^ "\n")

let timestamp () =
  let ts = Unix.gettimeofday() in
  let tm = Unix.localtime ts in
  let us, _s = modf ts in
  sprintf "%04d-%02d-%02d %02d:%02d:%02d.%03d "
    (1900 + tm.Unix.tm_year)
    (1    + tm.Unix.tm_mon)
    (tm.Unix.tm_mday)
    (tm.Unix.tm_hour)
    (tm.Unix.tm_min)
    (tm.Unix.tm_sec)
    (int_of_float (1_000. *. us))

let mkdir dir =
  if Sys.file_exists dir then ()
  else Unix.mkdir dir 0o755

let add_log arch =
  let file = sprintf "%s/build.log" arch in
  mkdir (Filename.dirname file);
  let line = sprintf "%s %S" (timestamp ()) (Bytes.create 48) in
  append ~file line

let add_result arch result =
  let file = "result.log" in
  let contents = match result with
    | `Ok    -> sprintf "[ { arch: %S; result: \"ok\" } ]" arch
    | `Error -> sprintf "[ { arch: %S; result: \"error\" } ]" arch
  in
  output_file ~file contents

let command fmt =
  kprintf (fun cmd ->
      info "%s %s" (yellow_s "=>") cmd;
      match Sys.command cmd with
      | 0 -> ()
      | i -> error "The command %S exited with code %d." cmd i;
    ) fmt

let push arch server =
  add_log arch;
  add_log arch;
  add_log arch;
  let result = if Random.int 10 = 0 then `Error else `Ok in
  add_result arch result;
  command "dog push %s -m \"Updates from %s\"" server arch

let arch, server =
  if Array.length Sys.argv <> 3 then (
    info "usage: %s [arch] [server]" (Filename.basename Sys.argv.(0));
    exit 1
  ) else
    Sys.argv.(1), Sys.argv.(2)

let () =
  command "dog init %s" arch;
  add_line ".merge" (sprintf "%s/* append" arch);
  while true do
    push arch server;
    Unix.sleep 1
  done
